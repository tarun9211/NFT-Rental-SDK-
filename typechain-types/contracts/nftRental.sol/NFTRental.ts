/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace NFTRental {
  export type LendedNFTStruct = {
    nftKey: PromiseOrValue<string>;
    lenderAddress: PromiseOrValue<string>;
    borrowerAddress: PromiseOrValue<string>;
    dueDate: PromiseOrValue<BigNumberish>;
    dailyRent: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
  };

  export type LendedNFTStructOutput = [
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber
  ] & {
    nftKey: string;
    lenderAddress: string;
    borrowerAddress: string;
    dueDate: number;
    dailyRent: BigNumber;
    collateral: BigNumber;
  };

  export type RentedNFTStruct = {
    nftKey: PromiseOrValue<string>;
    lenderAddress: PromiseOrValue<string>;
    borrowerAddress: PromiseOrValue<string>;
    numberOfDays: PromiseOrValue<BigNumberish>;
    rentalStartTime: PromiseOrValue<BigNumberish>;
  };

  export type RentedNFTStructOutput = [
    string,
    string,
    string,
    number,
    number
  ] & {
    nftKey: string;
    lenderAddress: string;
    borrowerAddress: string;
    numberOfDays: number;
    rentalStartTime: number;
  };
}

export interface NFTRentalInterface extends utils.Interface {
  functions: {
    "addNFTToLend(string,address,address,uint256,string,string,address,uint32,uint256,uint256)": FunctionFragment;
    "addUser(address)": FunctionFragment;
    "addressToUser(address)": FunctionFragment;
    "claimCollateral(string)": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "getNftKeysListAvaiableForRent()": FunctionFragment;
    "getUserAddressList()": FunctionFragment;
    "getUserLendedNFTDetails(address,string)": FunctionFragment;
    "getUserLendedNFTListDetails(address,uint256)": FunctionFragment;
    "getUserRentedNFTDetails(address,string)": FunctionFragment;
    "getUserRentedNFTListDetails(address,uint256)": FunctionFragment;
    "nftKeyToLendedNftDetails(string)": FunctionFragment;
    "nftKeyToNftProps(string)": FunctionFragment;
    "nftKeyToRentedNftDetails(string)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "rentNft(string,address,uint16,uint32)": FunctionFragment;
    "returnNFT(string)": FunctionFragment;
    "stopLend(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNFTToLend"
      | "addUser"
      | "addressToUser"
      | "claimCollateral"
      | "getContractBalance"
      | "getNftKeysListAvaiableForRent"
      | "getUserAddressList"
      | "getUserLendedNFTDetails"
      | "getUserLendedNFTListDetails"
      | "getUserRentedNFTDetails"
      | "getUserRentedNFTListDetails"
      | "nftKeyToLendedNftDetails"
      | "nftKeyToNftProps"
      | "nftKeyToRentedNftDetails"
      | "onERC721Received"
      | "rentNft"
      | "returnNFT"
      | "stopLend"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNFTToLend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNftKeysListAvaiableForRent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAddressList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLendedNFTDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLendedNFTListDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRentedNFTDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRentedNFTListDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftKeyToLendedNftDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftKeyToNftProps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftKeyToRentedNftDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentNft",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "returnNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stopLend",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNFTToLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftKeysListAvaiableForRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLendedNFTDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLendedNFTListDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRentedNFTDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRentedNFTListDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftKeyToLendedNftDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftKeyToNftProps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftKeyToRentedNftDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "returnNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopLend", data: BytesLike): Result;

  events: {
    "NFTCollateralClaimed()": EventFragment;
    "NFTLended()": EventFragment;
    "NFTRented()": EventFragment;
    "NFTReturned()": EventFragment;
    "NFTStopLended()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTCollateralClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTLended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTReturned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTStopLended"): EventFragment;
}

export interface NFTCollateralClaimedEventObject {}
export type NFTCollateralClaimedEvent = TypedEvent<
  [],
  NFTCollateralClaimedEventObject
>;

export type NFTCollateralClaimedEventFilter =
  TypedEventFilter<NFTCollateralClaimedEvent>;

export interface NFTLendedEventObject {}
export type NFTLendedEvent = TypedEvent<[], NFTLendedEventObject>;

export type NFTLendedEventFilter = TypedEventFilter<NFTLendedEvent>;

export interface NFTRentedEventObject {}
export type NFTRentedEvent = TypedEvent<[], NFTRentedEventObject>;

export type NFTRentedEventFilter = TypedEventFilter<NFTRentedEvent>;

export interface NFTReturnedEventObject {}
export type NFTReturnedEvent = TypedEvent<[], NFTReturnedEventObject>;

export type NFTReturnedEventFilter = TypedEventFilter<NFTReturnedEvent>;

export interface NFTStopLendedEventObject {}
export type NFTStopLendedEvent = TypedEvent<[], NFTStopLendedEventObject>;

export type NFTStopLendedEventFilter = TypedEventFilter<NFTStopLendedEvent>;

export interface NFTRental extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTRentalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNFTToLend(
      _nftKey: PromiseOrValue<string>,
      _nftOwner: PromiseOrValue<string>,
      _nftAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      _nftName: PromiseOrValue<string>,
      _nftImageURL: PromiseOrValue<string>,
      _lenderAddress: PromiseOrValue<string>,
      _dueDate: PromiseOrValue<BigNumberish>,
      _dailyRent: PromiseOrValue<BigNumberish>,
      _collateral: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressToUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { userAddress: string }>;

    claimCollateral(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNftKeysListAvaiableForRent(
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserAddressList(overrides?: CallOverrides): Promise<[string[]]>;

    getUserLendedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTRental.LendedNFTStructOutput]>;

    getUserLendedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserRentedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTRental.RentedNFTStructOutput]>;

    getUserRentedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nftKeyToLendedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber] & {
        nftKey: string;
        lenderAddress: string;
        borrowerAddress: string;
        dueDate: number;
        dailyRent: BigNumber;
        collateral: BigNumber;
      }
    >;

    nftKeyToNftProps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string] & {
        nftKey: string;
        nftOwner: string;
        nftAddress: string;
        nftId: BigNumber;
        nftName: string;
        nftImageURL: string;
      }
    >;

    nftKeyToRentedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number] & {
        nftKey: string;
        lenderAddress: string;
        borrowerAddress: string;
        numberOfDays: number;
        rentalStartTime: number;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rentNft(
      _nftKey: PromiseOrValue<string>,
      _borrowerAddress: PromiseOrValue<string>,
      _numberOfDays: PromiseOrValue<BigNumberish>,
      _rentalStartTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnNFT(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopLend(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addNFTToLend(
    _nftKey: PromiseOrValue<string>,
    _nftOwner: PromiseOrValue<string>,
    _nftAddress: PromiseOrValue<string>,
    _nftId: PromiseOrValue<BigNumberish>,
    _nftName: PromiseOrValue<string>,
    _nftImageURL: PromiseOrValue<string>,
    _lenderAddress: PromiseOrValue<string>,
    _dueDate: PromiseOrValue<BigNumberish>,
    _dailyRent: PromiseOrValue<BigNumberish>,
    _collateral: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUser(
    _userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressToUser(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  claimCollateral(
    _nftKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getNftKeysListAvaiableForRent(overrides?: CallOverrides): Promise<string[]>;

  getUserAddressList(overrides?: CallOverrides): Promise<string[]>;

  getUserLendedNFTDetails(
    _userAddress: PromiseOrValue<string>,
    _nftKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTRental.LendedNFTStructOutput>;

  getUserLendedNFTListDetails(
    _userAddress: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserRentedNFTDetails(
    _userAddress: PromiseOrValue<string>,
    _nftKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTRental.RentedNFTStructOutput>;

  getUserRentedNFTListDetails(
    _userAddress: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  nftKeyToLendedNftDetails(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, BigNumber, BigNumber] & {
      nftKey: string;
      lenderAddress: string;
      borrowerAddress: string;
      dueDate: number;
      dailyRent: BigNumber;
      collateral: BigNumber;
    }
  >;

  nftKeyToNftProps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string] & {
      nftKey: string;
      nftOwner: string;
      nftAddress: string;
      nftId: BigNumber;
      nftName: string;
      nftImageURL: string;
    }
  >;

  nftKeyToRentedNftDetails(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number] & {
      nftKey: string;
      lenderAddress: string;
      borrowerAddress: string;
      numberOfDays: number;
      rentalStartTime: number;
    }
  >;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rentNft(
    _nftKey: PromiseOrValue<string>,
    _borrowerAddress: PromiseOrValue<string>,
    _numberOfDays: PromiseOrValue<BigNumberish>,
    _rentalStartTime: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnNFT(
    _nftKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopLend(
    _nftKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNFTToLend(
      _nftKey: PromiseOrValue<string>,
      _nftOwner: PromiseOrValue<string>,
      _nftAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      _nftName: PromiseOrValue<string>,
      _nftImageURL: PromiseOrValue<string>,
      _lenderAddress: PromiseOrValue<string>,
      _dueDate: PromiseOrValue<BigNumberish>,
      _dailyRent: PromiseOrValue<BigNumberish>,
      _collateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressToUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimCollateral(
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNftKeysListAvaiableForRent(overrides?: CallOverrides): Promise<string[]>;

    getUserAddressList(overrides?: CallOverrides): Promise<string[]>;

    getUserLendedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTRental.LendedNFTStructOutput>;

    getUserLendedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserRentedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTRental.RentedNFTStructOutput>;

    getUserRentedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nftKeyToLendedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, BigNumber, BigNumber] & {
        nftKey: string;
        lenderAddress: string;
        borrowerAddress: string;
        dueDate: number;
        dailyRent: BigNumber;
        collateral: BigNumber;
      }
    >;

    nftKeyToNftProps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string] & {
        nftKey: string;
        nftOwner: string;
        nftAddress: string;
        nftId: BigNumber;
        nftName: string;
        nftImageURL: string;
      }
    >;

    nftKeyToRentedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number] & {
        nftKey: string;
        lenderAddress: string;
        borrowerAddress: string;
        numberOfDays: number;
        rentalStartTime: number;
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    rentNft(
      _nftKey: PromiseOrValue<string>,
      _borrowerAddress: PromiseOrValue<string>,
      _numberOfDays: PromiseOrValue<BigNumberish>,
      _rentalStartTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    returnNFT(
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopLend(
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NFTCollateralClaimed()"(): NFTCollateralClaimedEventFilter;
    NFTCollateralClaimed(): NFTCollateralClaimedEventFilter;

    "NFTLended()"(): NFTLendedEventFilter;
    NFTLended(): NFTLendedEventFilter;

    "NFTRented()"(): NFTRentedEventFilter;
    NFTRented(): NFTRentedEventFilter;

    "NFTReturned()"(): NFTReturnedEventFilter;
    NFTReturned(): NFTReturnedEventFilter;

    "NFTStopLended()"(): NFTStopLendedEventFilter;
    NFTStopLended(): NFTStopLendedEventFilter;
  };

  estimateGas: {
    addNFTToLend(
      _nftKey: PromiseOrValue<string>,
      _nftOwner: PromiseOrValue<string>,
      _nftAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      _nftName: PromiseOrValue<string>,
      _nftImageURL: PromiseOrValue<string>,
      _lenderAddress: PromiseOrValue<string>,
      _dueDate: PromiseOrValue<BigNumberish>,
      _dailyRent: PromiseOrValue<BigNumberish>,
      _collateral: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressToUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimCollateral(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNftKeysListAvaiableForRent(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAddressList(overrides?: CallOverrides): Promise<BigNumber>;

    getUserLendedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLendedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRentedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRentedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftKeyToLendedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftKeyToNftProps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftKeyToRentedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rentNft(
      _nftKey: PromiseOrValue<string>,
      _borrowerAddress: PromiseOrValue<string>,
      _numberOfDays: PromiseOrValue<BigNumberish>,
      _rentalStartTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnNFT(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopLend(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNFTToLend(
      _nftKey: PromiseOrValue<string>,
      _nftOwner: PromiseOrValue<string>,
      _nftAddress: PromiseOrValue<string>,
      _nftId: PromiseOrValue<BigNumberish>,
      _nftName: PromiseOrValue<string>,
      _nftImageURL: PromiseOrValue<string>,
      _lenderAddress: PromiseOrValue<string>,
      _dueDate: PromiseOrValue<BigNumberish>,
      _dailyRent: PromiseOrValue<BigNumberish>,
      _collateral: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressToUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftKeysListAvaiableForRent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAddressList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLendedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLendedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRentedNFTDetails(
      _userAddress: PromiseOrValue<string>,
      _nftKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRentedNFTListDetails(
      _userAddress: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftKeyToLendedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftKeyToNftProps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftKeyToRentedNftDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rentNft(
      _nftKey: PromiseOrValue<string>,
      _borrowerAddress: PromiseOrValue<string>,
      _numberOfDays: PromiseOrValue<BigNumberish>,
      _rentalStartTime: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnNFT(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopLend(
      _nftKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
